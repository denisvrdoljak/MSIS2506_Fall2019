typeof(mydate)
class(mydate)
mydate
a = "5"
a
as.integer (a)
b = 5
as.character (b)
c = "2019-10-8"
as.Date (c)
vector1 <- 1:9
vector1
a <- 1.2:9
a
a <- 1.2:9
a
1:5
1:5.1
#  specifically selected numbers
vector3 = 1:9
vector3
vector2 = c(1, 3, 2, -8.1)
vector2
vec <- 1:10
vec
vec_rev <- rev(vec)                      # Apply rev function to vector
vec_rev                                  # Print reversed example vector
paste ("a" , "b" , sep = "-")
x = 1:15
x
grep (5 , x)
x
x = 1:15
x
grep (5 , x)
grep (1 , x)
grep (2 , x)
grep (2 , x)
list_a <- list("Red", "Green", c(21,32,11), TRUE)
list_a
# matrix() function takes the data and the number of rows (nrow) and makes a matrix by filling down each column from the left to the right
matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3)
i = 0
While (i <= 5){
print (i)
i = i + 1}
i = 0
while (i <= 5){
print (i)
i = i + 1}
# While Loop
I = 0
while (i <= 5){
print (i)
i = i + 1}
square_function <- function (x)
{
# compute the square of x
y = sqrt (x)
return (y)
}
square_function (144)
ls()
test_expression = FALSE
test_expression_2 = TRUE
if (test_expression) {
#code goes here
print("If conditions is True, this will execute")
}
else if (test_expression_2){
#code goes here
print("If second condition is True, but first is false, this will execute")
}
else {
#code goes here
print("if both conditions are false, this will execute")
test_expression = TRUE#FALSE
test_expression_2 = TRUE
if (test_expression) {
#code goes here
print("If conditions is True, this will execute")
}
else if (test_expression_2){
#code goes here
print("If second condition is True, but first is false, this will execute")
}
else {
#code goes here
print("if both conditions are false, this will execute")
}
test_expression = TRUE#FALSE
test_expression_2 = TRUE
if (test_expression) {
#code goes here
print("If conditions is True, this will execute")
}
else if (test_expression_2){
#code goes here
print("If second condition is True, but first is false, this will execute")
}
else {
#code goes here
print("if both conditions are false, this will execute")
}
test_expression = TRUE#FALSE
test_expression_2 = TRUE
if (test_expression) {
#code goes here
print("If conditions is True, this will execute")
}
else if (test_expression_2) {
#code goes here
print("If second condition is True, but first is false, this will execute")
}
else {
#code goes here
print("if both conditions are false, this will execute")
}
test_expression = TRUE#FALSE
test_expression_2 = TRUE
if (test_expression) {
#code goes here
print("If conditions is True, this will execute")
}
else if (test_expression_2) {
#code goes here
print("If second condition is True, but first is false, this will execute")
}
test_expression1 = FALSE
test_expression2 = TRUE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
test_expression1 = TRUE
test_expression2 = TRUE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
test_expression1 = FALSE
test_expression2 = FALSE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
test_expression = TRUE#FALSE
test_expression_2 = TRUE
if (test_expression) {
#code goes here
print("If conditions is True, this will execute")
}
else if (test_expression_2) {
#code goes here
print("If second condition is True, but first is false, this will execute")
}
else {
#code goes here
print("if both conditions are false, this will execute")
}
test_expression = TRUE#FALSE
test_expression_2 = TRUE
if (test_expression) {
#code goes here
print("If conditions is True, this will execute")
}
else if (test_expression_2) {
#code goes here
print("If second condition is True, but first is false, this will execute")
}
else {
#code goes here
print("if both conditions are false, this will execute")
}
# if statements
test_expression1 = FALSE
test_expression2 = FALSE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
for (i in 1:5) {
print (i)
}
i = 0
while (i <= 5){
print (i)
i = i + 1}
square_function (144)
a = 3- 1
a
a <- 1 + 1
a
b = 1 + 2 / 3 - 2 * 6.5
b
b = 1 * (2 / (1 + 1))
b
sqrt(5)
sum (5, 6, 7, 8, 9)
sqrt (144)
a = "hello world"
a
b = "7"
b
c = "1 + 1"
c
as.Date("2019-10-8")
"2019-10-8"
as.Date("2019-10-8")
mydate = as.Date("2019-10-8")
typeof(mydate)
class(mydate)
mydate
a = "5"
a
as.integer (a)
typeof(as.integer (a))
class(as.integer (a))
b = 5
as.character (b)
c = "2019-10-8"
as.Date (c)
# the colon operator creates a sequence of numbers from left to the right
a <- 1.2:9
a
a <- 1.2:9.2
a
a <- 1.2:9
a
vector3 = 1:9
vector3
vector2 = c(1, 3, 2, -8.1)
vector2
c(1,2,3)
1:3
vec <- 1:10
vec
vec_rev <- rev(vec)                      # Apply rev function to vector
vec_rev                                  # Print reversed example vector
table(vec_rev)
table(c(1,1,1,2,3,4))
unique(c(1,1,1,2,3,4))
vec_rev < 4
vec_rev[vec_rev < 4]
x = 'hi'
x
print(x)
sprint(x)
fprint(x)
fprintf(x)
sprintf(x)
if ( test_expression1) {
print("If conditions is True, this will execute")
} else {
print("if both conditions are false, this will execute")
test_expression1 = TRUE
test_expression2 = FALSE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else {
print("if both conditions are false, this will execute")
}
test_expression1 = FALSE
test_expression2 = FALSE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
test_expression1 = FALSE
test_expression2 = TRUE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
test_expression1 = TRUE
test_expression2 = FALSE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
i = 0
while (i <= 5){
print (i)
i = i + 1}
asdf
}}
i = 0
while (i <= 5){
print (i)
i = i + 1}
i = 0
if (i <= 5){
print (i)
i = i + 1}
i = 0
while (i <= 5){
print (i)
i = i + 1}
for (i in 1:5) {
print (i)
}
install.packages("primes")
library(primes)
data("ChickWeight")
ChickWeight$weight
type(ChickWeight$weight)
typeof(ChickWeight$weight)
class(ChickWeight$weight)
type(ChickWeight$weight)
ChickWeight$weight
ChickWeight$weight[3]
ChickWeight$weight[-1]
ChickWeight$weight[length(ChickWeight$weight)]
ChickWeight$weight[length(ChickWeight$weight)-4]
myvec <- ChickWeight$weight
myvec[length(myvec)]
ChickWeight$weight2 = ChickWeight$weight / 1000
ChickWeight$weight2
ChickWeight$weight
ChickWeight$weight2 = ChickWeight$weight / 1000
ChickWeight$weight2
length(ChickWeight$weight2)
1:length(ChickWeight$weight2)
row.names(ChickWeight)
row.names(ChickWeight)[1:10]
odd
odd()
sqrt(5)
sum (5, 6, 7, 8, 9)
a = "hello world"
a
typeof(a)
b = "7"
b
typeof(b)
a = 3- 1
typeof(a)
a
class(a)
as.Date("2019-10-8")
aaa = as.Date("2019-10-8")
aaa
type(aaa)
typeof(aaa)
class(aaa)
1:9
typeof(1:9)
class(1:9)
1.2:9
1.2:9.2
1.2:9
aa = 1.2:9
aa
aa[aa>5]
aa>5
7>5
1>5
aa = [1,2,3,4,5,5,6,7,7,7,7,8,87,10]
aa = c(1,2,3,4,5,5,6,7,7,7,7,8,87,10)
aa
unique((aa))
table(aa)
aa = c(1,2,3,4,5,5,6,7,7,7,7,8,8,7,10)
unique((aa))
table(aa)
sort(aa)
aa
rev(aa)
aa
aa = c(1,2,3,4,5,5,6,7,7,7,7,8,8,7,10,1,1,1)
sort(aa)
aa
paste ("a" , "b" , sep = "-")
x = 1:15
x
grep (2 , x)
x[x==2]
grep (2 , x)
nchar('asdf')
test_expression1 = TRUE
test_expression2 = TRUE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
test_expression1 = FALSE
test_expression2 = TRUE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
test_expression1 = FALSE
test_expression2 = FALSE
if ( test_expression1) {
print("If conditions is True, this will execute")
} else if ( test_expression2) {
print("If second condition is True, but first is false, this will execute")
}else {
print("if both conditions are false, this will execute")
}
for (i in 1:5) {
print (i)
}
for (i in 1:5) {
print (i)
}
i=1
while (i < 6){
print(i)
i = i+1
}
for (i in 1:5) {
print (i)
}
ls()
for (i in 1:5) {
print (i)
}
n = c(2, -3, 5)
n = c(2, -3, 5)
n
b=c(TRUE, FALSE, TRUE)
b
s = c("aa", "bb", "cc")
s
df=data.frame(n, s, b)
df
ll <- list (list(1:3), list(4:6), list(7:9))
df <- as.data.frame(ll)
df
df[1,2]
df[1,]
df[,2]
nrow(df)
ncol(df)
head(df)
df[[2]]
df[["X1.3"]]
df $X1.3
df[2]
df[[2]]
df[2]
df
source('~/Desktop/MSIS2506_Fall2019/wk4/R week4 2019_v6.R')
df[c("X1.3","X4.6")]
df[3,]
df[c(2,3),]
df["1",]
df[c("2","3"),]
getwd()
setwd("/Users/mario/Documents/Santa Clara")
setwd("/Users/denisvrdoljak/Desktop/MSIS2506_Fall2019/wk4")
getwd()
mydata=read.table("indata.txt")
mydata
mydata=read.csv("datafile.csv")
mydata
ff=read.table("fillna.txt")
ff
ff
is.na(ff)
x1 <- c(1, 4, 3, NA, 7)
x2 <- c("a", "B", NA, "NA")
x1
x2
is.na(x1)
x1[is.na(x1)]
x1
x1[is.na(x1)] <- "imputedValue"
x1
ff=read.table("fillna.txt")
ff
is.na(ff)
na.omit(ff)
na.exclude(ff)
na.fail(ff)
na.pass(ff)
ff
ff[is.na(ff)] <- 0
ff
ff
typeof(ff)
class(ff)
typeof(ChickWeight)
class(ChickWeight)
